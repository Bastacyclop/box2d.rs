use math::Vec2;
use dynamics;
use shapes;

pub type box2d_bool = u8;
pub fn box2d_bool(b: bool) -> box2d_bool { if b {1} else {0} }

pub struct box2d_Filter;
pub struct box2d_PolygonShape;
pub struct box2d_BodyDef;
pub struct box2d_FixtureDef;
pub struct box2d_Joint;
pub struct box2d_JointEdge;
pub struct box2d_World;
pub struct box2d_Shape;
pub struct box2d_Body;
pub struct box2d_Fixture;
pub struct box2d_Transform;
pub struct box2d_RayCastInput;
pub struct box2d_RayCastOutput;
pub struct box2d_AABB;
pub struct box2d_MassData;
pub struct box2d_ContactEdge;
pub struct box2d_ContactListener;
pub struct box2d_ContactFilter;
pub struct box2d_DestructionListener;
pub struct box2d_Contact;
pub struct box2d_ContactManager;
pub struct box2d_Profile;
pub struct box2d_Draw;
pub struct box2d_RayCastCallback;
pub struct box2d_QueryCallback;

pub struct box2d_UserData;

#[link(name = "cbox2d", kind = "static")]
#[link_args = "-lcbox2d -lBox2D -lstdc++"]
extern {
    // b2World
    pub fn box2d_World_Create(gravity: *Vec2) -> *box2d_World;
    pub fn box2d_World_Destroy(world: *box2d_World);
    pub fn box2d_World_SetDestructionListener(this: *box2d_World, listener: *box2d_DestructionListener);
    pub fn box2d_World_SetContactFilter(this: *box2d_World, filter: *box2d_ContactFilter);
    pub fn box2d_World_SetContactListener(this: *box2d_World, listener: *box2d_ContactListener);
    pub fn box2d_World_SetDebugDraw(this: *box2d_World, debugdraw: *box2d_Draw);
    pub fn box2d_World_CreateBody(this: *box2d_World, def: *box2d_BodyDef) -> *box2d_Body;
    pub fn box2d_World_CreateJoint(this: *box2d_World, def: *dynamics::JointDef) -> *box2d_Joint;
    pub fn box2d_World_DestroyJoint(this: *box2d_World, joint: *box2d_Joint);
    pub fn box2d_World_DestroyBody(this: *box2d_World, body: *box2d_Body);
    pub fn box2d_World_Step(this: *box2d_World, timeStep: f32, velocityIterations: i32, positionIterations: i32);
    pub fn box2d_World_ClearForces(this: *box2d_World);
    pub fn box2d_World_DrawDebugData(this: *box2d_World);
    pub fn box2d_World_QueryAABB(this: *box2d_World, cb: *box2d_QueryCallback, aabb: *box2d_AABB);
    pub fn box2d_World_RayCast(this: *box2d_World, cb: *box2d_RayCastCallback, p1: *Vec2, p2: *Vec2);
    pub fn box2d_World_GetBodyList(this: *box2d_World) -> *box2d_Body;
    pub fn box2d_World_GetJointList(this: *box2d_World) -> *box2d_Joint;
    pub fn box2d_World_GetContactList(this: *box2d_World) -> *box2d_Contact;
    pub fn box2d_World_SetAllowSleeping(this: *box2d_World, flag: box2d_bool);
    pub fn box2d_World_GetAllowSleeping(this: *box2d_World) -> box2d_bool;
    pub fn box2d_World_SetWarmStarting(this: *box2d_World, flag: box2d_bool);
    pub fn box2d_World_GetWarmStarting(this: *box2d_World) -> box2d_bool;
    pub fn box2d_World_SetContinuousPhysics(this: *box2d_World, flag: box2d_bool);
    pub fn box2d_World_GetContinuousPhysics(this: *box2d_World) -> box2d_bool;
    pub fn box2d_World_SetSubStepping(this: *box2d_World, flag: box2d_bool);
    pub fn box2d_World_GetSubStepping(this: *box2d_World) -> box2d_bool;
    pub fn box2d_World_GetProxyCount(this: *box2d_World) -> i32;
    pub fn box2d_World_GetBodyCount(this: *box2d_World) -> i32;
    pub fn box2d_World_GetJointCount(this: *box2d_World) -> i32;
    pub fn box2d_World_GetContactCount(this: *box2d_World) -> i32;
    pub fn box2d_World_GetTreeHeight(this: *box2d_World) -> i32;
    pub fn box2d_World_GetTreeBalance(this: *box2d_World) -> i32;
    pub fn box2d_World_GetTreeQuality(this: *box2d_World) -> f32;
    pub fn box2d_World_SetGravity(this: *box2d_World, gravity: *Vec2);
    pub fn box2d_World_GetGravity(this: *box2d_World) -> Vec2;
    pub fn box2d_World_IsLocked(this: *box2d_World) -> box2d_bool;
    pub fn box2d_World_SetAutoClearForces(this: *box2d_World, flag: box2d_bool);
    pub fn box2d_World_GetAutoClearForces(this: *box2d_World) -> box2d_bool;
    pub fn box2d_World_GetContactManager(this: *box2d_World) -> *box2d_ContactManager;
    pub fn box2d_World_GetProfile(this: *box2d_World) -> *box2d_Profile;
    pub fn box2d_World_Dump(this: *box2d_World);
    // b2Body
    pub fn box2d_Body_CreateFixture(this: *box2d_Body, def: *box2d_FixtureDef) -> *box2d_Fixture;
    pub fn box2d_Body_CreateFixture_shape(this: *box2d_Body, shape: *box2d_Shape, density: f32) -> *box2d_Fixture;
    pub fn box2d_Body_DestroyFixture(this: *box2d_Body, fixture: *box2d_Fixture);
    pub fn box2d_Body_SetTransform(this: *box2d_Body, position: *Vec2, angle: f32);
    pub fn box2d_Body_GetTransform(this: *box2d_Body) -> *box2d_Transform;
    pub fn box2d_Body_GetPosition(this: *box2d_Body) -> *Vec2;
    pub fn box2d_Body_GetAngle(this: *box2d_Body) -> f32;
    pub fn box2d_Body_GetWorldCenter(this: *box2d_Body) -> *Vec2;
    pub fn box2d_Body_GetLocalCenter(this: *box2d_Body) -> *Vec2;
    pub fn box2d_Body_SetLinearVelocity(this: *box2d_Body, v: *Vec2);
    pub fn box2d_Body_GetLinearVelocity(this: *box2d_Body) -> Vec2;
    pub fn box2d_Body_SetAngularVelocity(this: *box2d_Body, omega: f32);
    pub fn box2d_Body_GetAngularVelocity(this: *box2d_Body) -> f32;
    pub fn box2d_Body_ApplyForce(this: *box2d_Body, forece: *Vec2, point: *Vec2);
    pub fn box2d_Body_ApplyForceToCenter(this: *box2d_Body, force: *Vec2);
    pub fn box2d_Body_ApplyTorque(this: *box2d_Body, torque: f32);
    pub fn box2d_Body_ApplyLinearImpulse(this: *box2d_Body, impulse: *Vec2, point: *Vec2);
    pub fn box2d_Body_ApplyAngularImpulse(this: *box2d_Body, impulse: f32);
    pub fn box2d_Body_GetMass(this: *box2d_Body) -> f32;
    pub fn box2d_Body_GetInertia(this: *box2d_Body) -> f32;
    pub fn box2d_Body_GetMassData(this: *box2d_Body, data: *box2d_MassData);
    pub fn box2d_Body_SetMassData(this: *box2d_Body, data: *box2d_MassData);
    pub fn box2d_Body_ResetMassData(this: *box2d_Body);
    pub fn box2d_Body_GetWorldPoint(this: *box2d_Body, localPoint: *Vec2) -> Vec2;
    pub fn box2d_Body_GetWorldVector(this: *box2d_Body, localVector: *Vec2) -> Vec2;
    pub fn box2d_Body_GetLocalPoint(this: *box2d_Body, worldPoint: *Vec2) -> Vec2;
    pub fn box2d_Body_GetLocalVector(this: *box2d_Body, worldVector: *Vec2) -> Vec2;
    pub fn box2d_Body_GetLinearVelocityFromWorldPoint(this: *box2d_Body, worldPoint: *Vec2) -> Vec2;
    pub fn box2d_Body_GetLinearVelocityFromLocalPoint(this: *box2d_Body, localPoint: *Vec2) -> Vec2;
    pub fn box2d_Body_GetLinearDamping(this: *box2d_Body) -> f32;
    pub fn box2d_Body_SetLinearDamping(this: *box2d_Body, linearDamping: f32);
    pub fn box2d_Body_GetAngularDamping(this: *box2d_Body) -> f32;
    pub fn box2d_Body_SetAngularDamping(this: *box2d_Body, angularDamping: f32);
    pub fn box2d_Body_GetGravityScale(this: *box2d_Body) -> f32;
    pub fn box2d_Body_SetGravityScale(this: *box2d_Body, scale: f32);
    pub fn box2d_Body_SetType(this: *box2d_Body, bodyType: dynamics::BodyType);
    pub fn box2d_Body_GetType(this: *box2d_Body) -> dynamics::BodyType;
    pub fn box2d_Body_SetBullet(this: *box2d_Body, flag: box2d_bool);
    pub fn box2d_Body_IsBullet(this: *box2d_Body) -> box2d_bool;
    pub fn box2d_Body_SetSleepingAllowed(this: *box2d_Body, flag: box2d_bool);
    pub fn box2d_Body_IsSleepingAllowed(this: *box2d_Body) -> box2d_bool;
    pub fn box2d_Body_SetAwake(this: *box2d_Body, flag: box2d_bool);
    pub fn box2d_Body_IsAwake(this: *box2d_Body) -> box2d_bool;
    pub fn box2d_Body_SetActive(this: *box2d_Body, flag: box2d_bool);
    pub fn box2d_Body_IsActive(this: *box2d_Body) -> box2d_bool;
    pub fn box2d_Body_SetFixedRotation(this: *box2d_Body, flag: box2d_bool);
    pub fn box2d_Body_IsFixedRotation(this: *box2d_Body) -> box2d_bool;
    pub fn box2d_Body_GetFixtureList(this: *box2d_Body) -> *box2d_Fixture;
    pub fn box2d_Body_GetJointList(this: *box2d_Body) -> *box2d_JointEdge;
    pub fn box2d_Body_GetContactList(this: *box2d_Body) -> *box2d_ContactEdge;
    pub fn box2d_Body_GetNext(this: *box2d_Body) -> *box2d_Body;
    pub fn box2d_Body_GetUserData(this: *box2d_Body);
    pub fn box2d_Body_SetUserData(this: *box2d_Body, data: *box2d_UserData);
    pub fn box2d_Body_GetWorld(this: *box2d_Body) -> *box2d_World;
    pub fn box2d_Body_Dump(this: *box2d_Body);
    // b2Shape
    pub fn box2d_Shape_GetType(this: *box2d_Shape) -> shapes::ShapeType;
    pub fn box2d_Shape_GetChildCount(this: *box2d_Shape) -> i32;
    pub fn box2d_Shape_TestPoint(this: *box2d_Shape,  xf: *box2d_Transform, p: *Vec2) -> box2d_bool;
    pub fn box2d_Shape_RayCast(this: *box2d_Shape, output: *box2d_RayCastOutput,  input: *box2d_RayCastInput, transform: *box2d_Transform, childIndex: i32) -> box2d_bool;
    pub fn box2d_Shape_ComputeAABB(this: *box2d_Shape, aabb: *box2d_AABB, xf: *box2d_Transform, childIndex: i32);
    pub fn box2d_Shape_ComputeMass(this: *box2d_Shape, massData: *box2d_MassData, density: f32);
    // b2PolygonShape
    pub fn box2d_PolygonShape_Create() -> *box2d_PolygonShape;
    pub fn box2d_PolygonShape_Destroy(s: *box2d_PolygonShape);
    pub fn box2d_PolygonShape_Upcast(s: *box2d_PolygonShape) -> *box2d_Shape;
    pub fn box2d_PolygonShape_GetChildCount(this: *box2d_PolygonShape) -> i32;
    pub fn box2d_PolygonShape_Set(this: *box2d_PolygonShape,  points: *Vec2, count: i32);
    pub fn box2d_PolygonShape_SetAsBox(this: *box2d_PolygonShape, hx: f32, hy: f32);
    pub fn box2d_PolygonShape_SetAsBox_2(this: *box2d_PolygonShape, hx: f32, hy: f32, center: *Vec2, angle: f32);
    pub fn box2d_PolygonShape_GetVertexCount(this: *box2d_PolygonShape) -> i32;
    pub fn box2d_PolygonShape_GetVertex(this: *box2d_PolygonShape, index: i32) -> *Vec2;
    // b2Fixture
    pub fn box2d_FixtureDef_create() -> box2d_FixtureDef;
    pub fn box2d_Fixture_GetType(this: *box2d_Fixture) -> shapes::ShapeType;
    pub fn box2d_Fixture_GetShape(this: *box2d_Fixture) -> *box2d_Shape;
    pub fn box2d_Fixture_SetSensor(this: *box2d_Fixture, sensor: box2d_bool);
    pub fn box2d_Fixture_IsSensor(this: *box2d_Fixture) -> box2d_bool;
    pub fn box2d_Fixture_SetFilterData(this: *box2d_Fixture, filter: *box2d_Filter);
    pub fn box2d_Fixture_GetFilterData(this: *box2d_Fixture) -> *box2d_Filter;
    pub fn box2d_Fixture_Refilter(this: *box2d_Fixture);
    pub fn box2d_Fixture_GetBody(this: *box2d_Fixture) -> *box2d_Body;
    pub fn box2d_Fixture_GetNext(this: *box2d_Fixture) -> *box2d_Fixture;
    pub fn box2d_Fixture_GetNext_(this: *box2d_Fixture) -> *box2d_Fixture;
    pub fn box2d_Fixture_GetUserData(this: *box2d_Fixture) -> *box2d_UserData;
    pub fn box2d_Fixture_SetUserData(this: *box2d_Fixture, data: *box2d_UserData);
    pub fn box2d_Fixture_TestPoint(this: *box2d_Fixture,  p: *Vec2) -> box2d_bool;
    pub fn box2d_Fixture_RayCast(this: *box2d_Fixture, output: *box2d_RayCastOutput, input: *box2d_RayCastInput, childIndex: i32) -> box2d_bool;
    pub fn box2d_Fixture_GetMassData(this: *box2d_Fixture, massData: *box2d_MassData);
    pub fn box2d_Fixture_SetDensity(this: *box2d_Fixture, density: f32);
    pub fn box2d_Fixture_GetDensity(this: *box2d_Fixture) -> f32;
    pub fn box2d_Fixture_GetFriction(this: *box2d_Fixture) -> f32;
    pub fn box2d_Fixture_SetFriction(this: *box2d_Fixture, friction: f32);
    pub fn box2d_Fixture_GetRestitution(this: *box2d_Fixture) -> f32;
    pub fn box2d_Fixture_SetRestitution(this: *box2d_Fixture, restitution: f32);
    pub fn box2d_Fixture_GetAABB(this: *box2d_Fixture, childIndex: i32) -> *box2d_AABB;
    pub fn box2d_Fixture_Dump(this: *box2d_Fixture, bodyIndex: i32);
    // b2Joint
    pub fn box2d_Joint_GetType(this: *box2d_Joint) -> i32;
    pub fn box2d_Joint_GetBodyA(this: *box2d_Joint) -> *box2d_Body;
    pub fn box2d_Joint_GetBodyB(this: *box2d_Joint) -> *box2d_Body;
    pub fn box2d_Joint_GetAnchorA(this: *box2d_Joint) -> Vec2;
    pub fn box2d_Joint_GetAnchorB(this: *box2d_Joint) -> Vec2;
    pub fn box2d_Joint_GetReactionForce(this: *box2d_Joint, inv_dt: f32) -> Vec2;
    pub fn box2d_Joint_GetReactionTorque(this: *box2d_Joint, inv_dt: f32) -> f32;
    pub fn box2d_Joint_GetNext(this: *box2d_Joint) -> *box2d_Joint;
    pub fn box2d_Joint_GetUserData(this: *box2d_Joint) -> *box2d_UserData;
    pub fn box2d_Joint_SetUserData(this: *box2d_Joint, data: box2d_UserData);
    pub fn box2d_Joint_IsActive(this: *box2d_Joint) -> box2d_bool;
    pub fn box2d_Joint_GetCollideConnected(this: *box2d_Joint) -> box2d_bool;
    pub fn box2d_Joint_Dump(this: *box2d_Joint);
}
